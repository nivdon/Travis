# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Java CI with Maven

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # build:

  #   runs-on: ubuntu-latest

  #   steps:
  #     - uses: actions/checkout@v2

  #     - name: Set up JDK 11
  #       uses: actions/setup-java@v2
  #       with:
  #         java-version: '11'
  #         distribution: 'adopt'
  #         cache: maven

  #     - name: Build with Maven Wrapper
  #       run: ./mvnw clean -B package
        
  #     - name: Create Artifacts
  #       run: |
  #         sudo apt-get install zip
  #         zip deploy_artifacts.zip target/*.jar appspec.yml run.sh setup.sh stop.sh
          

  #     - name: Upload Artifacts
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: jar-file
  #         path: deploy_artifacts.zip
        
  # test:
  #   runs-on: ubuntu-latest
    
  #   steps:
  #     - uses: actions/checkout@v2
  #       with:
  #         fetch-depth: 0       

  #     - name: Set up JDK 11
  #       uses: actions/setup-java@v2
  #       with:
  #         java-version: '11'
  #         distribution: 'adopt'
  #         cache: maven

  #     - name: Cache SonarCloud packages
  #       uses: actions/cache@v1
  #       with:
  #         path: ~/.sonar/cache
  #         key: ${{ runner.os }}-sonar
  #         restore-keys: ${{ runner.os }}-sonar

  #     - name: Cache Maven packages
  #       uses: actions/cache@v1
  #       with:
  #         path: ~/.m2
  #         key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
  #         restore-keys: ${{ runner.os }}-m2

  #     - name: Build and analyze
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
  #         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  #       run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=conceptsandbeyond_devopsfundamentals
      
  CodeguruScan:
    runs-on: ubuntu-latest
    # needs: [build]
    env:
      Region: us-east-1    
    permissions:
      id-token: write
      contents: read
      
    steps:
      # - name: Download the artifact
      #   uses: actions/download-artifact@v2
      #   with:
      #     name: jar-file
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0 # This is a required field for CodeGuru

      - name: configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::667493128782:role/GItHubNewAssumeRole
          aws-region: ${{ env.Region }}
      
      - name: build
        run: ./mvnw clean -B package

          
      - name: CodeGuru Reviewer
        if: ${{ always() }}
        uses: aws-actions/codeguru-reviewer@v1.1
        with:
          build_path: target # build artifact(s) directory
          s3_bucket: codeguru-reviewer-github-actions-nivdon # S3 Bucket with "codeguru-reviewer-*" prefix        
  
      - name: Upload review result
        if: ${{ github.event_name != 'push' }}
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: codeguru-results.sarif.json # Your results file will be named codeguru-results.sarif.json
          
    
  
  # Upload:
  #   runs-on: ubuntu-latest
  #   needs: [CodeguruScan]
  #   env:
  #     Region: us-east-1
  #     S3Folder: githubactions3
  #   permissions:
  #     id-token: write
  #     contents: read
      
  #   steps:
  #     - name: Download an artifact
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: jar-file

  #     - name: configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         role-to-assume: arn:aws:iam::667493128782:role/GItHubNewAssumeRole
  #         aws-region: ${{ env.Region }}
          
  #     - name: Upload the artifacts (S3)
  #       run: |
  #         ls
  #         aws s3 cp *.zip s3://octank-config-rules/${{ env.S3Folder }}/
          
            
  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: [upload]
  #   env:
  #     Region: us-east-1
  #     S3Folder: githubactions3
  #   permissions:
  #     id-token: write
  #     contents: read
      
  #   steps:
  #     - name: configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         role-to-assume: arn:aws:iam::667493128782:role/GItHubNewAssumeRole
  #         aws-region: ${{ env.Region }}
          
          
  #     - name: CodeDeploy to EC2
  #       id: deploy
  #       run: |
  #         aws deploy create-deployment \
  #           --application-name Git_application \
  #           --deployment-group-name dg_Git_Application \
  #           --deployment-config-name CodeDeployDefault.AllAtOnce \
  #           --ignore-application-stop-failures \
  #           --s3-location bucket=octank-config-rules,bundleType=zip,key=${{ env.S3Folder }}/deploy_artifacts.zip
